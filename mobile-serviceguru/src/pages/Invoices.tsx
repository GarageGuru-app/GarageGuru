import React, { useState, useEffect } from 'react';
import { 
  Search, 
  Plus, 
  FileText,
  Download,
  Share,
  IndianRupee,
  Calendar,
  Eye
} from 'lucide-react';
import { User, db, DatabaseManager, Invoice, Customer, JobCard } from '../lib/database';
import MobileHeader from '../components/MobileHeader';
import MobileNavigation from '../components/MobileNavigation';
import LoadingSpinner from '../components/LoadingSpinner';

interface InvoicesPageProps {
  user: User;
}

interface InvoiceWithDetails extends Invoice {
  customer?: Customer;
  job_card?: JobCard;
}

const InvoicesPage: React.FC<InvoicesPageProps> = ({ user }) => {
  const [invoices, setInvoices] = useState<InvoiceWithDetails[]>([]);
  const [filteredInvoices, setFilteredInvoices] = useState<InvoiceWithDetails[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isLoading, setIsLoading] = useState(true);
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [monthlyRevenue, setMonthlyRevenue] = useState(0);

  useEffect(() => {
    loadInvoices();
  }, [user.garage_id]);

  useEffect(() => {
    filterInvoices();
  }, [invoices, searchTerm]);

  const loadInvoices = async () => {
    try {
      setIsLoading(true);
      
      // Load invoices
      const invoiceData = await db.invoices
        .where('garage_id')
        .equals(user.garage_id)
        .reverse()
        .toArray();

      // Add customer and job card details
      const invoicesWithDetails = await Promise.all(
        invoiceData.map(async (invoice) => {
          const [customer, jobCard] = await Promise.all([
            db.customers.get(invoice.customer_id),
            db.job_cards.get(invoice.job_card_id)
          ]);
          return { ...invoice, customer, job_card: jobCard };
        })
      );

      setInvoices(invoicesWithDetails);

      // Calculate revenue stats
      const total = invoicesWithDetails.reduce((sum, invoice) => sum + invoice.total_amount, 0);
      setTotalRevenue(total);

      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();
      const monthlyTotal = invoicesWithDetails
        .filter(invoice => 
          invoice.created_at.getMonth() === currentMonth && 
          invoice.created_at.getFullYear() === currentYear
        )
        .reduce((sum, invoice) => sum + invoice.total_amount, 0);
      setMonthlyRevenue(monthlyTotal);

    } catch (error) {
      console.error('Error loading invoices:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const filterInvoices = () => {
    let filtered = invoices;

    if (searchTerm) {
      filtered = filtered.filter(invoice => 
        invoice.invoice_number.toLowerCase().includes(searchTerm.toLowerCase()) ||
        invoice.customer?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        invoice.customer?.bike_number.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredInvoices(filtered);
  };

  const generatePDF = async (invoice: InvoiceWithDetails) => {
    try {
      // Import jsPDF dynamically
      const { jsPDF } = await import('jspdf');
      
      const doc = new jsPDF();
      const garage = await DatabaseManager.getCurrentGarage();
      
      // Add garage header
      doc.setFontSize(20);
      doc.text(garage?.name || 'ServiceGuru', 20, 30);
      
      doc.setFontSize(12);
      doc.text(`${garage?.owner_name}`, 20, 40);
      doc.text(`${garage?.phone} | ${garage?.email}`, 20, 50);
      
      // Invoice details
      doc.setFontSize(16);
      doc.text('INVOICE', 20, 70);
      
      doc.setFontSize(12);
      doc.text(`Invoice #: ${invoice.invoice_number}`, 20, 85);
      doc.text(`Date: ${invoice.created_at.toLocaleDateString()}`, 20, 95);
      
      // Customer details
      doc.text('Bill To:', 20, 115);
      doc.text(`${invoice.customer?.name}`, 20, 125);
      doc.text(`${invoice.customer?.phone}`, 20, 135);
      doc.text(`Vehicle: ${invoice.customer?.bike_number}`, 20, 145);
      
      // Service details
      doc.text('Service Details:', 20, 165);
      doc.text(`Complaint: ${invoice.job_card?.complaint}`, 20, 175);
      
      // Charges breakdown
      doc.text(`Service Charges: ₹${invoice.service_charges}`, 20, 195);
      doc.text(`Parts Total: ₹${invoice.parts_total}`, 20, 205);
      doc.text(`Total Amount: ₹${invoice.total_amount}`, 20, 215);
      
      // Footer
      doc.setFontSize(10);
      doc.text('Generated by ServiceGuru Mobile', 20, 280);
      
      // Download
      doc.save(`Invoice-${invoice.invoice_number}.pdf`);
      
      alert('Invoice PDF downloaded!');
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Failed to generate PDF');
    }
  };

  const shareInvoice = async (invoice: InvoiceWithDetails) => {
    try {
      const shareText = `
ServiceGuru Invoice
Invoice #: ${invoice.invoice_number}
Customer: ${invoice.customer?.name}
Vehicle: ${invoice.customer?.bike_number}
Total: ₹${invoice.total_amount}
Generated by ServiceGuru Mobile
      `.trim();

      if (navigator.share) {
        await navigator.share({
          title: `Invoice ${invoice.invoice_number}`,
          text: shareText
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(shareText);
        alert('Invoice details copied to clipboard!');
      }
    } catch (error) {
      console.error('Error sharing invoice:', error);
      alert('Failed to share invoice');
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <MobileHeader title="Invoices" showBack />
        <LoadingSpinner />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      <MobileHeader 
        title="Invoices"
        showBack
        rightAction={user.role === 'garage_admin' ? {
          icon: <Plus className="w-5 h-5" />,
          onClick: () => {
            alert('Create invoice from completed job cards!');
          }
        } : undefined}
      />

      <div className="mobile-container pt-6 pb-8">
        
        {/* Revenue Summary - Admin Only */}
        {user.role === 'garage_admin' && (
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="mobile-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">Total Revenue</p>
                  <p className="text-2xl font-bold text-green-600">₹{totalRevenue}</p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                  <IndianRupee className="w-6 h-6 text-green-600" />
                </div>
              </div>
            </div>

            <div className="mobile-card">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-600">This Month</p>
                  <p className="text-2xl font-bold text-blue-600">₹{monthlyRevenue}</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                  <Calendar className="w-6 h-6 text-blue-600" />
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Search Bar */}
        <div className="relative mb-6">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
          <input
            type="text"
            placeholder="Search by invoice number or customer"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="mobile-input pl-10"
          />
        </div>

        {/* Invoices List */}
        {filteredInvoices.length === 0 ? (
          <div className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <FileText className="w-8 h-8 text-gray-400" />
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {searchTerm ? 'No invoices found' : 'No invoices yet'}
            </h3>
            <p className="text-gray-500 mb-6">
              {searchTerm 
                ? 'Try adjusting your search term'
                : 'Invoices will appear here once created'
              }
            </p>
          </div>
        ) : (
          <div className="space-y-4">
            {filteredInvoices.map((invoice) => (
              <div key={invoice.id} className="mobile-card">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h3 className="text-lg font-semibold text-gray-900">
                        Invoice #{invoice.invoice_number}
                      </h3>
                      {invoice.sync_status === 'pending' && (
                        <div className="w-2 h-2 bg-orange-400 rounded-full" title="Pending sync" />
                      )}
                    </div>
                    
                    <div className="space-y-1">
                      <p className="text-sm text-gray-600">
                        Customer: {invoice.customer?.name}
                      </p>
                      <p className="text-sm text-gray-600">
                        Vehicle: {invoice.customer?.bike_number}
                      </p>
                      <p className="text-xs text-gray-500">
                        Date: {invoice.created_at.toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <p className="text-2xl font-bold text-green-600">
                      ₹{invoice.total_amount}
                    </p>
                  </div>
                </div>

                {/* Breakdown */}
                <div className="p-3 bg-gray-50 rounded-lg mb-3">
                  <div className="grid grid-cols-2 gap-2 text-sm">
                    <div>
                      <p className="text-gray-500">Service Charges</p>
                      <p className="font-medium">₹{invoice.service_charges}</p>
                    </div>
                    <div>
                      <p className="text-gray-500">Parts Total</p>
                      <p className="font-medium">₹{invoice.parts_total}</p>
                    </div>
                  </div>
                </div>

                {/* Complaint/Service */}
                <div className="mb-3">
                  <p className="text-sm font-medium text-gray-700 mb-1">Service:</p>
                  <p className="text-sm text-gray-600">
                    {invoice.job_card?.complaint || 'Service details'}
                  </p>
                </div>

                {/* Action Buttons */}
                <div className="flex space-x-2">
                  <button
                    onClick={() => {
                      alert('Invoice details view coming soon!');
                    }}
                    className="flex-1 bg-blue-100 text-blue-700 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-1"
                  >
                    <Eye className="w-4 h-4" />
                    <span>View</span>
                  </button>

                  <button
                    onClick={() => generatePDF(invoice)}
                    className="flex-1 bg-green-100 text-green-700 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-1"
                  >
                    <Download className="w-4 h-4" />
                    <span>PDF</span>
                  </button>

                  <button
                    onClick={() => shareInvoice(invoice)}
                    className="flex-1 bg-purple-100 text-purple-700 py-2 px-3 rounded-lg text-sm font-medium flex items-center justify-center space-x-1"
                  >
                    <Share className="w-4 h-4" />
                    <span>Share</span>
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      <MobileNavigation userRole={user.role} />
    </div>
  );
};

export default InvoicesPage;