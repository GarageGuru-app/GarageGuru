2025-08-29T17:49:05.681208738Z > vite build && esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist --minify
2025-08-29T17:49:05.681218308Z 
2025-08-29T17:49:05.865193511Z vite v5.4.19 building for production...
2025-08-29T17:49:05.913664242Z transforming...
2025-08-29T17:49:06.197002156Z Browserslist: browsers data (caniuse-lite) is 10 months old. Please run:
2025-08-29T17:49:06.197025577Z   npx update-browserslist-db@latest
2025-08-29T17:49:06.197031927Z   Why you should do it regularly: https://github.com/browserslist/update-db#readme
2025-08-29T17:49:12.952016826Z âœ“ 2657 modules transformed.
2025-08-29T17:49:13.414945215Z rendering chunks...
2025-08-29T17:49:13.90584411Z computing gzip size...
2025-08-29T17:49:13.944068043Z ../dist/public/index.html                                    0.62 kB â”‚ gzip:   0.39 kB
2025-08-29T17:49:13.944096914Z ../dist/public/assets/index-BkENBDCA.css                    83.66 kB â”‚ gzip:  14.43 kB
2025-08-29T17:49:13.944242867Z ../dist/public/assets/qr-scanner.min-4rsmN4tb.js            15.77 kB â”‚ gzip:   5.61 kB
2025-08-29T17:49:13.944354599Z ../dist/public/assets/purify.es-BFmuJLeH.js                 21.93 kB â”‚ gzip:   8.62 kB
2025-08-29T17:49:13.94439033Z ../dist/public/assets/qr-scanner-worker.min-D85Z9gVD.js     43.95 kB â”‚ gzip:  10.46 kB
2025-08-29T17:49:13.94440386Z ../dist/public/assets/index.es-m-97lF1p.js                 150.53 kB â”‚ gzip:  51.48 kB
2025-08-29T17:49:13.944425331Z ../dist/public/assets/html2canvas.esm-CBrSDip1.js          201.42 kB â”‚ gzip:  48.03 kB
2025-08-29T17:49:13.944447291Z ../dist/public/assets/index-CZqkIVjw.js                  1,497.83 kB â”‚ gzip: 427.88 kB
2025-08-29T17:49:13.944527702Z 
2025-08-29T17:49:13.944535373Z (!) Some chunks are larger than 500 kB after minification. Consider:
2025-08-29T17:49:13.944555073Z - Using dynamic import() to code-split the application
2025-08-29T17:49:13.944558943Z - Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
2025-08-29T17:49:13.944561733Z - Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
2025-08-29T17:49:13.944824319Z âœ“ built in 8.06s
2025-08-29T17:49:14.076541734Z 
2025-08-29T17:49:14.076563405Z   dist/index.js  108.8kb
2025-08-29T17:49:14.076566085Z 
2025-08-29T17:49:14.076568435Z âš¡ Done in 12ms
2025-08-29T17:49:15.254208979Z ==> Uploading build...
2025-08-29T17:49:32.287824072Z ==> Uploaded in 12.0s. Compression took 5.0s
2025-08-29T17:49:32.398709146Z ==> Build successful ðŸŽ‰
2025-08-29T17:49:35.699121884Z ==> Deploying...
2025-08-29T17:50:03.200072271Z ==> Running 'npm start'
2025-08-29T17:50:04.287192308Z 
2025-08-29T17:50:04.287226099Z > rest-express@1.0.0 start
2025-08-29T17:50:04.287232939Z > NODE_ENV=production node dist/index.js
2025-08-29T17:50:04.287235539Z 
2025-08-29T17:50:10.594077757Z file:///opt/render/project/src/dist/index.js:431
2025-08-29T17:50:10.594107929Z         `};return await this.transporter.sendMail(f),console.log("\u{1F4E7} Approval email sent successfully to:",t),!0}catch(d){return console.error("\u{1F4E7} Failed to send approval email:",d),!1}}},je=B.getInstance(),qe=je});import ie from"express";import{createServer as Ye}from"http";import Ve from"cors";import{Pool as Ne}from"pg";var ce=process.env.SUPABASE_DATABASE_URL;if(!ce)throw new Error("SUPABASE_DATABASE_URL must be set.");var u=new Ne({connectionString:ce,ssl:{rejectUnauthorized:!1},connectionTimeoutMillis:3e4,idleTimeoutMillis:3e4,max:20});u.on("connect",()=>{console.log("Connected to PostgreSQL database")});u.on("error",c=>{console.error("PostgreSQL connection error:",c)});import j from"crypto";import Ce from"bcrypt";var Z=class{async ping(){try{return(await u.query("SELECT 1 as ping")).rows[0]?.ping===1}catch(t){return console.error("Database ping failed:",t),!1}}async getUserByEmail(t){try{return(await u.query("SELECT * FROM users WHERE email = $1 LIMIT 1",[t])).rows[0]}catch(r){console.error("getUserByEmail error:",r);return}}async getUserById(t){try{return(await u.query("SELECT * FROM users WHERE id = $1 LIMIT 1",[t])).rows[0]}catch(r){console.error("getUserById error:",r);return}}async createUser(t){let r=t.id||j.randomUUID();return(await u.query("INSERT INTO users (id, email, password, role, garage_id, name, must_change_password, first_login, status, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *",[r,t.email,t.password,t.role,t.garage_id,t.name,t.must_change_password||!1,t.firstLogin!==!1,t.status||"active",new Date])).rows[0]}async createGarage(t){let r=t.id||j.randomUUID();return(await u.query("INSERT INTO garages (id, name, owner_name, phone, email, logo, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *",[r,t.name,t.owner_name,t.phone,t.email,t.logo,new Date])).rows[0]}async getGarage(t){try{let i=(await u.query("SELECT * FROM garages WHERE id = $1",[t])).rows[0];return i&&{...i,ownerName:i.owner_name,createdAt:i.created_at}}catch(r){console.error("getGarage error:",r);return}}async getGarageStaff(t){try{return(await u.query(`SELECT id, email, name, role, status, garage_id, created_at 
2025-08-29T17:50:10.594114749Z                                                                                                                                                                                                                                                                                                                                                                                                         ^
2025-08-29T17:50:10.594117879Z 
2025-08-29T17:50:10.594121159Z Error: SUPABASE_DATABASE_URL must be set.
2025-08-29T17:50:10.594125329Z     at file:///opt/render/project/src/dist/index.js:431:393
2025-08-29T17:50:10.594128739Z     at ModuleJob.run (node:internal/modules/esm/module_job:274:25)
2025-08-29T17:50:10.59413301Z     at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
2025-08-29T17:50:10.59413641Z     at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)
2025-08-29T17:50:10.59413954Z 
2025-08-29T17:50:10.59414276Z Node.js v22.16.0
2025-08-29T17:50:14.845191919Z ==> Exited with status 1
2025-08-29T17:50:15.007021872Z ==> Common ways to troubleshoot your deploy: https://render.com/docs/troubleshooting-deploys
2025-08-29T17:50:19.969333772Z ==> Running 'npm start'
2025-08-29T17:50:20.781592488Z 
2025-08-29T17:50:20.781610868Z > rest-express@1.0.0 start
2025-08-29T17:50:20.781615578Z > NODE_ENV=production node dist/index.js
2025-08-29T17:50:20.781618369Z 
2025-08-29T17:50:27.473865556Z file:///opt/render/project/src/dist/index.js:431
2025-08-29T17:50:27.473893767Z         `};return await this.transporter.sendMail(f),console.log("\u{1F4E7} Approval email sent successfully to:",t),!0}catch(d){return console.error("\u{1F4E7} Failed to send approval email:",d),!1}}},je=B.getInstance(),qe=je});import ie from"express";import{createServer as Ye}from"http";import Ve from"cors";import{Pool as Ne}from"pg";var ce=process.env.SUPABASE_DATABASE_URL;if(!ce)throw new Error("SUPABASE_DATABASE_URL must be set.");var u=new Ne({connectionString:ce,ssl:{rejectUnauthorized:!1},connectionTimeoutMillis:3e4,idleTimeoutMillis:3e4,max:20});u.on("connect",()=>{console.log("Connected to PostgreSQL database")});u.on("error",c=>{console.error("PostgreSQL connection error:",c)});import j from"crypto";import Ce from"bcrypt";var Z=class{async ping(){try{return(await u.query("SELECT 1 as ping")).rows[0]?.ping===1}catch(t){return console.error("Database ping failed:",t),!1}}async getUserByEmail(t){try{return(await u.query("SELECT * FROM users WHERE email = $1 LIMIT 1",[t])).rows[0]}catch(r){console.error("getUserByEmail error:",r);return}}async getUserById(t){try{return(await u.query("SELECT * FROM users WHERE id = $1 LIMIT 1",[t])).rows[0]}catch(r){console.error("getUserById error:",r);return}}async createUser(t){let r=t.id||j.randomUUID();return(await u.query("INSERT INTO users (id, email, password, role, garage_id, name, must_change_password, first_login, status, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *",[r,t.email,t.password,t.role,t.garage_id,t.name,t.must_change_password||!1,t.firstLogin!==!1,t.status||"active",new Date])).rows[0]}async createGarage(t){let r=t.id||j.randomUUID();return(await u.query("INSERT INTO garages (id, name, owner_name, phone, email, logo, created_at) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *",[r,t.name,t.owner_name,t.phone,t.email,t.logo,new Date])).rows[0]}async getGarage(t){try{let i=(await u.query("SELECT * FROM garages WHERE id = $1",[t])).rows[0];return i&&{...i,ownerName:i.owner_name,createdAt:i.created_at}}catch(r){console.error("getGarage error:",r);return}}async getGarageStaff(t){try{return(await u.query(`SELECT id, email, name, role, status, garage_id, created_at 
2025-08-29T17:50:27.473899977Z                                                                                                                                                                                                                                                                                                                                                                                                         ^
2025-08-29T17:50:27.473902638Z 
2025-08-29T17:50:27.473905198Z Error: SUPABASE_DATABASE_URL must be set.
2025-08-29T17:50:27.473908078Z     at file:///opt/render/project/src/dist/index.js:431:393
2025-08-29T17:50:27.473910888Z     at ModuleJob.run (node:internal/modules/esm/module_job:274:25)
2025-08-29T17:50:27.473913848Z     at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
2025-08-29T17:50:27.473916598Z     at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)
2025-08-29T17:50:27.473918848Z 
2025-08-29T17:50:27.473921218Z Node.js v22.16.0